# XUA Documentation - Preface
# XUA Tools Development Team
# Winter 1399

# HTML Configurations
    # html.TITLE = "Preface"
    # html.SUBTITLE = "An Introduction To XUA"

# XUADOC Configurations
    # xuadoc.renderComments = "doc"
    # xuadoc.renderCodes = "pure"

# -- #########################################
# # Introduction

# XUA is shortened form of Xuarazmi, named after [al-Khwarizmi](https://duckduckgo.com), 
# Persian mathematician and poet, formerly Latinized as Algorithmi (and yes that's where 
# the word _algorithm_ comes from).

# XUA is a Code Generator Tool, mainly usable for creating Web-Services and in some cases 
# for creating complete Web-Sites (including back-end and front-end). The aim of XUA is to
# generate all trivial and technical codes for us so we only need to write the codes that
# actually require human intelligence. In other words the only thing that XUA does not do
# is it's name. We need to give it algorithms and it generates codes that do the rest by themselves.

# XUA generates server codes in [PHP](https://en.wikipedia.org/wiki/PHP) language.
# While a full and complete PHP Project can be generated by XUA, it is not possible to get a complete
# front-end project, instead, XUA can generate a front-end library (_Marshal Library_) that can make the
# connection between client and XUA server faster, more secure, more reliable, and easier to implement. 

# -- #########################################
# # Practicalities

# ## System Requirements

# Currently, XUA tools are only available on linux.

# - Python 3, is required to build projects and make templates.

# - The PHP Engine and a PHP Server, is recommended for test and debug on local server.

# - MySQL Server, is recommended for test and debug on local server.

# - VSCode, is recommended with XUA extension installed to program in XUA language. Although it's not
# a necessity, but the extension will help with code correction and autocomplete as well as making the build process easier. 

# ## Getting Started

# ### Installation

# Installing VSCode XUA extension will automatically install requirements and XUA tools, but if you're not willing to use VSCode,
# you can clone our repository.
#    git clone https://github.com/kmirzavaziri/xua.git

# And run 
#    python3 xua.py install

# ### Hello World!

# To create a new project, go to a directory you want to create the project and run
#    xua new project

# Now build the template project you just created
#    xua build

# Set up a PHP server on the build destination location (`public_html` by default)
#    cd public_html
#    php -S localhost:8000

# Now you should be able to see the _Hello World!_ page by visiting the [localhost:8000](http://localhost:8000/) page on
# your browser.

# ### Cheat Sheet

# #### Templates

# Create a new XUA project in the current directory.
#    xua new project

# Create a new entity file in current directory's XUA project.
#    xua new entity ENTITY-NAME

# Create a new method file in current directory's XUA project.
#    xua new method METHOD-NAME

# Create a new super file in current directory's XUA project.
#    xua new super SUPER-NAME

# Create a new service file for a specific language in current directory's XUA project.
#    xua new service SERVICE-NAME [-l LANGUAGE]

# Create a new interface file in current directory's XUA project.
#    xua new interface "ROUTE-SPECIFICATION"

# #### Build

# Quickly build server project (only build changes).
#    xua build quick [-d DESTINATION]

# Build server project (completely).
#    xua build server [-d DESTINATION]
# @TODO what's the difference?

# Build Marshal Library for a specific language.
#    xua build marshal [-d DESTINATION] [-l LANGUAGE]

# Build documentations for the current directory.
#    xua build doc [-d DESTINATION] [-t TEMPLATE_FILE]

# Build a complete set of server project, Marshal Library, and documentations. (build arguments can be 
# specified in config.xml)
#    xua build

# -- #########################################
# # Architecture

# a XUA project is actually a combination of __Specifications__ that will result in generating a server
# project (shown as _A XUA Server_), a front-end library (shown as _A Marshal Library_), and a complete
# set of documentations (shown as _Documentations_).

# ![XUA Architecture](assets/images/XUAM.png)

# As shown above, there are only few units of the generated result that need explicit specification by
# programmer (marked blue), a XUA project is simply a set of files specifying these units. This leads us to
# the following structure of a XUA project.

#    XUA Project Root
#    ├─ Entities
#    │  └─ (empty by default)
#    ├─ Interfaces
#    │  └─ (homepage interface and URPI)
#    ├─ Methods
#    │  └─ (empty by default)
#    ├─ Resources
#    │  ├─ Public
#    │  │  └─ (empty by default)
#    │  ├─ Private
#    │  └─ └─ (empty by default)
#    ├─ Services
#    │  ├─ Dart
#    │  │  └─ (xua services)
#    │  ├─ PHP
#    │  │  └─ (xua services)
#    │  ├─ Java
#    │  │  └─ (xua services)
#    │  ├─ JavaScript
#    │  │  └─ (xua services)
#    │  ├─ Kotlin
#    │  │  └─ (xua services)
#    │  ├─ Objective-C
#    │  │  └─ (xua services)
#    │  ├─ Swift
#    │  └─ └─ (xua services)
#    ├─ Supers
#    │  └─ (basic supers)
#    └─ config.xml

# In this documentation, we try to cover all of these units. By visiting the page [Architecture](Architecture.html)
# and clicking on a unit, you'll be redirected to documentation section of that unit.
